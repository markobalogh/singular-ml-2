import { Normalization, Normalizer } from './normalization';
export declare class Feature {
    name: string;
    values: number[];
    normalization?: Normalization;
    /**
     * Indicates whether this feature should be considered a target feature - this property naturally lies with the feature so that it remains true if features are shuffled or transformed. False by default.
     */
    isTarget: boolean;
    /**
     * Creates an instance of Feature.
     * @memberof Feature
     */
    constructor(name: string, values?: number[]);
    static fromObj(obj: any): Feature;
    getValue(index: number): number;
    setValue(index: number, newValue: number): Feature;
    getSlice(startIndex: number, endIndex: number): number[];
    plot(): void;
    push(value: number): Feature;
    extend(values: number[]): Feature;
    /**
     * Moves the indexes associated with each value in the given Feature up or down by the given shift. Feature length is kept constant. Fills missing values that result from the shift with NaNs. Positive shift values create `NaN`s at the beginning of Feature.values, while negative shift values create `NaN`s at the end.
     */
    shift(shiftAmount: number): Feature;
    /**
     * Replaces each value with the derivative over the previous [window] values. Right now we don't support index features, so the derivative values will instead simply be the differentials across each window. If relative is true, then all derivatives will be normalized to a proportion of the value at the beginning of the window.
     */
    differentiate(window?: number, relative?: boolean): Feature;
    /**
     * Implements the clamp transformation on the feature in place. Refer to FOML page 74. If a clamp is unspecified, then no clamp is applied on that side (upper/lower).
     */
    clamp(lowerClamp?: number, upperClamp?: number): Feature;
    /**
     * Implements the clamp transformation on the feature in place, clamping data to +/- [sigma] standard deviations from the mean.
     * @param sigma
     */
    clamp_sigma(sigma: number): Feature;
    /**
     * Normalizes the feature values with the normalization generated by `Normalizer`.
     */
    normalize(normalizer: Normalizer): Feature;
    /**
     * Denormalizes the feature values if they have been normalized.
     */
    denormalize(): Feature;
    /**
     * Returns an object containing the minimum and maximum values of the feature.
     */
    range(): {
        min: number;
        max: number;
    };
}
